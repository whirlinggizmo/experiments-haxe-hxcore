

# generate the list of all script files
#--cmd echo -n "Building scripts list... "
#--next
#--macro core.macros.ScriptCompiler.generateScriptsList('scripts', 'gen/scripts.hxml')
#--cmd echo "OK"

#--next
#--cmd echo "Building .cpp target (with cppia support)...\n"
#--next

-lib hxcore
-cp src


# enable cppia
-D scriptable 
-cpp out/cppia

#--dce full

#-D HXCPP_DEBUGGER

# force include some classes that cppia seems to think are here
#--macro include('haxe.Exception')
#--macro include('core.scripting.Script')

# include the scripts as part of the build
#gen/scripts.hxml


--debug
# vscode debugger
-lib hxcpp-debug-server
--dce no

# JIT is enabled by default for cppia (except for emscripten targets)
#-D CPPIA_NO_JIT



--define HAXE_OUTPUT_FILE=ScriptTest
--main ScriptTest

# copy the generated export_classes.info to the scripts directory
--cmd mkdir -p scripts
--cmd cp export_classes.info scripts/export_classes.info
--cmd rm export_classes.info

# copy the executable to the dist directory
--cmd mkdir -p dist
--cmd cp out/cppia/ScriptTest dist/ScriptTest

# create a scripts directory, in case it doesn't exist
--cmd mkdir -p dist/scripts

--cmd echo "Compiling Test script..." 
--next

# for testing, we will compile the Test script directly
#--cmd haxe -lib hxcore --run core.scripting.ScriptCompiler --target cppia --sourceDir scripts --outputDir dist/scripts --script Test
build.script.hxml

--next

--cmd echo ""
--cmd echo "Build complete."

# launch the binary
--cmd ./dist/ScriptTest -src scripts -out dist/scripts