--cmd echo "Building ScriptTest..."
--next


# generate the list of all script files
#--cmd echo -n "Building scripts list... "
#--next
#--macro core.macros.ScriptCompiler.generateScriptsList('scripts', 'gen/scripts.hxml')
#--cmd echo "OK"

#--next
#--cmd echo "Building .cpp target (with cppia support)...\n"
#--next

-lib hxcore
-cp src
-cpp out


# enable cppia
-D scriptable 
-D HXCPP_M64
-D HXCPP_CATCH_SEGV
-D hxcpp_smart_strings
#-D dll_export=

# include the scripts as part of the build
#gen/scripts.hxml

# debugging
--debug
# vscode debugger
-lib hxcpp-debug-server
--dce no

--define HAXE_OUTPUT_FILE=ScriptTest
--main ScriptTest

# include the compiled in scripts 
scripts.Test

--next
--cmd mkdir -p scripts
--next
-lib hxcore
# filter the generated export_classes.info and write it to the script source directory
--macro hxcore.macros.ExportClassesInfo.filterToFile('export_classes.info', 'scripts/export_classes.filtered.info', ['^class scripts\\..*$'])
# move the original, unfiltered version to the script source directory for reference
--cmd mv export_classes.info scripts/export_classes.info
--next


# copy the executable to the dist directory
#--cmd mkdir -p dist
#--cmd pkill -9 ScriptTest || true
#--cmd cp out/ScriptTest dist/ScriptTest

# create a scripts directory, in case it doesn't exist
#--cmd mkdir -p dist/scripts
#--next

# compile the Test script
# We could also call "compile.script.hxml Test" from this hxml, but that sends *everything* after the call to the hxml as args to ScriptCompiler (including --next, --cmd, etc)
# Instead, we'll invoke the macro directly.
# BTW:  From the command line, you can rebuild the script with "haxe build.script.hxml Test", in case you don't have the hot-compile feature enabled.

#-lib hxcore
#--macro hxcore.scripting.ScriptCompiler.compileScript('.', 'scripts', 'dist/scripts', 'cppia', [], 'Test')

--cmd echo "Build of ScriptTest complete."

#--next
# run the scripttest app
#--cmd ./dist/ScriptTest --sourceDir ../scripts --scriptDir ./scripts 
#--next
